#########################################################
# .1 load data
#load(paste("results/", exprimentID,"_StatisticsTable_afterLOESS.RData",sep=""))  #"Genelist.top_pvalue" "ExprM.Stat2"
#load(paste("results/", exprimentID,"_ExprM.filter.RData", sep=""))  #"ExprM.RawCounts.filter"  "ExprM.normCounts.filter"
#load(paste("results/", exprimentID,"_ExprM.RData", sep=""))  #"ExprM.RawCounts"  "ExprM.normCounts"
dim(ExprM.RawCounts.filter)
if(GeneList == 1)
{
GeneList.final       = Genelist.top_pvalue
}else{
GeneList.final       = Genelist.HighNormGini
}
GeneList.final <- GeneList.final[nchar(GeneList.final)>0]
# .2 binarization
m = ExprM.RawCounts.filter[GeneList.final,]
#m<-as.matrix(m)
m2 = m
# if t is the expression vector, the question asked here is which count value x is the smallest one, when sum(t[t>x]) > Gamma % * sum(t).
bc.list.low = c()
bc.list.med = c()
bc.list.high = c()
for(rn in 1:dim(m)[1])
{
t <- as.numeric(m[rn,])
t.table <- data.frame(table(t))
c=as.numeric(as.character(t.table$t))
f=as.numeric(as.character(t.table$Freq))
tcf  <- data.frame(cbind(c,f))
csum <- apply(tcf,1,function(x){sum(t[t>=x[1]])/sum(t[t>0])})
tcfs <- data.frame(cbind(c,f,csum))
tcfs <- tcfs[rev(order(tcfs$c)),]
n = max(3, which(tcfs$csum>Gamma)[1])
bc.list.high[rn]  = tcfs$c[n]
bc.list.low[rn] = tcfs$c[n+1]   #range will be > bc.list.low[rn] to bc.list.high[rn]
bc.list.med[rn] = mean(c(bc.list.high[rn], bc.list.low[rn]))
}
top_n_gene = max(length(bc.list.low)*0.1, 10)
RawCounts_cutoff = floor(mean(bc.list.med[1:top_n_gene]))
all.gene.as.col.ExprM.RawCounts.binary = t(ExprM.RawCounts.filter)
all.gene.as.col.ExprM.RawCounts.binary[all.gene.as.col.ExprM.RawCounts.binary <  RawCounts_cutoff] = 0
all.gene.as.col.ExprM.RawCounts.binary[all.gene.as.col.ExprM.RawCounts.binary >= RawCounts_cutoff] = 1
final.gene.as.col.ExprM.RawCounts.binary = all.gene.as.col.ExprM.RawCounts.binary[, dimnames(all.gene.as.col.ExprM.RawCounts.binary)[[2]] %in% intersect(colnames(all.gene.as.col.ExprM.RawCounts.binary), GeneList.final)]
dim(final.gene.as.col.ExprM.RawCounts.binary)
# .3 jaccard distance matrix
###------------------------------- Complementary codes -------------------------------###
#locate cells whose gene expression values are all zeros
index.cell.zero = which(apply(final.gene.as.col.ExprM.RawCounts.binary,1,function(x) length(which(x>0)))==0)
if (dim(ExprM.RawCounts.filter)[2]<2**16){
cell.cell.jaccard.distance = 1 - jaccard(final.gene.as.col.ExprM.RawCounts.binary)
cell.cell.jaccard.distance = as.data.frame(as.matrix(cell.cell.jaccard.distance))
#covert distance between two 'zero cells' to zero
cell.cell.jaccard.distance[index.cell.zero,index.cell.zero] = 0
cell.cell.jaccard.distance = as.data.frame(as.matrix(cell.cell.jaccard.distance))
rownames(cell.cell.jaccard.distance)  = make.unique(rownames(final.gene.as.col.ExprM.RawCounts.binary))
colnames(cell.cell.jaccard.distance)  = rownames(final.gene.as.col.ExprM.RawCounts.binary)
}else{
cell.cell.jaccard.distance = jaccard_dist_large_matrix(final.gene.as.col.ExprM.RawCounts.binary)
}
#rownames(cell.cell.jaccard.distance)  = rownames(final.gene.as.col.ExprM.RawCounts.binary)
dim(cell.cell.jaccard.distance)
###-----------------------------------------------------------------------------------###
#determine MinPts
if (automatic_minpts==TRUE){
if (dim(cell.cell.jaccard.distance)[1]>3000){
#set to 0.1% of total number of points
MinPts<-floor(.001*dim(cell.cell.jaccard.distance)[1])
} else {MinPts<-3}
}
#determine eps
if (automatic_eps==TRUE){
if (dim(cell.cell.jaccard.distance)[1]<10000){ #after 10000 this becomes intensive to calculate
knndist<-dbscan::kNNdist(cell.cell.jaccard.distance, k =  MinPts)
knndistNoZero<-knndist
if (length(which(knndist==0))>0){
knndistNoZero<-knndist[-which(knndist==0)]
}
eps=(sort(knndistNoZero)[ifelse(floor(.00125*(dim(cell.cell.jaccard.distance)[1])*(MinPts)) < 1, 1, floor(.00125*(dim(cell.cell.jaccard.distance)[1])*(MinPts)))]) #2057
} else {
#compute eps for multiple smaller subsamples, use average eps
epss<-c()
for (i in 1:10){
size<-dim(cell.cell.jaccard.distance)[1]*3/MinPts
sampleIndices<-sample(seq(1:dim(cell.cell.jaccard.distance)[1]),size,replace=FALSE)
sampleDistance<-cell.cell.jaccard.distance[sampleIndices,sampleIndices]
knndist<-dbscan::kNNdist(sampleDistance, k =  3)
knndistNoZero<-knndist
if (length(which(knndist==0))>0){
knndistNoZero<-knndist[-which(knndist==0)]
}
eps=mean(sort(knndistNoZero)[1:floor(.00125*(size*(3)))]) #2057
epss<-c(epss,eps)
}
eps = mean(epss)
}
}
if(is.na(eps)){
P_G <- rep('Singleton', dim(ExprM.normCounts.filter)[2])
}else{
# .3 dbscan
title             = paste("eps", eps, "MinPts", MinPts, sep=".")
data.mclust       = fpc::dbscan(cell.cell.jaccard.distance, eps = eps, MinPts = MinPts,  method = "dist", showplot = FALSE)
#rename cluster names to include singletons
o_membership      = factor(paste("db_",data.mclust$cluster ,sep=""))
if(levels(o_membership)[1]=="db_0"){levels(o_membership)[1] = "Singleton"}
c_membership = o_membership
P_G=c_membership
print(table(P_G))
}
#save(P_G, file=paste("results/", exprimentID,"_GiniClustering.RData",sep=""))
#save(cell.cell.jaccard.distance,file=paste("results/",exprimentID,"_Gini_distance.RData",sep=""))
#save(GeneList.final,file=paste("results/",exprimentID,"_GeneList_final.RData",sep=""))
library(FiRE)
library(Rcpp)
library(rflann)
library(Seurat)
library(ineq)
library(e1071)
library(irlba)
library(scran)
workdir              = "/home/sam/Documents/RareCellDetection/Proj/Intestine/"
# where you put the data and results
setwd(workdir)
source('../../Main/utils.R')
#sourceCpp('/home/sam/Documents/FBT/Single/package/Rare/src/utils.cpp')
matrix_dir = 'GSE123516_RAW/'
setwd(workdir)
library(Matrix)
read.data <- function(file_id){
barcode.path <- paste0(matrix_dir, file_id, "_barcodes.tsv.gz")
features.path <- paste0(matrix_dir, file_id, "_genes.tsv.gz")
matrix.path <- paste0(matrix_dir, file_id, ".mtx.gz")
mat <- readMM(file = matrix.path)
feature.names = read.delim(features.path,
header = FALSE,
stringsAsFactors = FALSE)
barcode.names = read.delim(barcode.path,
header = FALSE,
stringsAsFactors = FALSE)
colnames(mat) = barcode.names$V1
rownames(mat) = feature.names$V2
return(mat)
}
files <- c('GSM3308717_C04', 'GSM3308718_C05', 'GSM3308719_C06', 'GSM3308720_C07')
mat1 <- read.data(files[1])
mat2 <- read.data(files[2])
#mat3 <- read.data(files[3])
#mat4 <- read.data(files[4])
all(mat1@Dimnames[[1]] == mat2@Dimnames[[1]])
#all(mat1@Dimnames[[1]] == mat3@Dimnames[[1]])
#all(mat1@Dimnames[[1]] == mat4@Dimnames[[1]])
#all(mat2@Dimnames[[1]] == mat4@Dimnames[[1]])
#all(mat3@Dimnames[[1]] == mat4@Dimnames[[1]])
#all(mat2@Dimnames[[1]] == mat3@Dimnames[[1]])
###############################################################
OUR.result <- list()
#for (i in 2:100){
#k=ks[j]
#data <- ExprM.normCounts.filter[rowMeans(ExprM.normCounts.filter) > 0,]
#data <- log2(data + 1)
#disp <- FastLogVMR(as(data, 'dgCMatrix'), F)
data <- as.matrix(mat2)
drop <- apply(data, 1, function(x){length(x[x>0])})
data <- data[drop>=2,]
sample.expressed <- apply(data, 2, function(x){length(x[x>0])})
data <- data[, sample.expressed>=200]
norm.data <- .normalize_by_umi(t(data), gene_symbols = dimnames(data)[[1]], minLibSize=0, verbose = F)
data2 <- t(norm.data$m)
#data2 <- log2(data +1)
#sc <- SCseq(data2)
#sc.temp <- sc
#sc <- filterdata(sc,mintotal=min(colSums(data2))-1, minexpr=min(data2[data2>0]-0.001), minnumber=1)
#fdata <- getfdata(sc)
#features <- sc@cluster$features
pbmc <- CreateSeuratObject(count = data2)
pbmc <- NormalizeData(object = pbmc, verbose = F)
## Different Fano genes for clustering
pbmc <- FindVariableFeatures(object = pbmc, selection.method='vst', nfeatures=dim(data2)[1], verbose = F)
vst <- (pbmc@assays$RNA@meta.features$vst.variance.standardized)
den <- density(vst)
features.vst <- dimnames(data2)[[1]][vst > find_elbow(den$x[which.max(den$y):length(den$x)], den$y[which.max(den$y):length(den$y)])]
#features.vst <- dimnames(data2)[[1]][vst > mean(vst) + 1.96 * sd(vst)]
#features.vst <- dimnames(data2)[[1]][order(vst, decreasing = T)[1:2000]]
##################################################################################################
#tmp <- data2[dimnames(data2)[[1]] %in% union(features, features.vst),]
tmp <- data2[dimnames(data2)[[1]] %in% (features.vst),]
tmp <- log2(tmp+1)
#tmp1 <- .normalize_by_umi(t(tmp), gene_symbols = dimnames(tmp)[[1]], minLibSize=0, verbose = F)
cell.sum <- apply(tmp, 2, sum)
tmp <- t(t(tmp)/(cell.sum/mean(cell.sum)))
#tmp <- tmp1$m
#pca <- calcul.pca(t(log2(tmp+1)), 50)
pca <- irlba(t(tmp), nv=50) # More robust no error, contrast to calcul.pca
pca$pca <-t(pca$d*t(pca$u))
#pca <- calcul.pca(t(data[dimnames(data)[[1]] %in% features,]), 50)
#pca <- prcomp(t(tmp))
#pca$pca <- pca$x[,1:min(50, dim(pca$x)[2])]
#pca <- calcul.pca(t(data[order(disp, decreasing = T)[1:2000],]), 50)
#knn.res <- Neighbour(pca$pca, pca$pca, k=200)
knn.res <- Neighbour(pca$pca, pca$pca, k=450)
distance.diff <- (knn.res$distances[, -1, drop = FALSE] - knn.res$distances[, -ncol(knn.res$distances), drop = FALSE])
diff.left <- distance.diff[, -1, drop = FALSE] - distance.diff[, -ncol(distance.diff), drop = FALSE]
diff.both <- diff.left[, -ncol(diff.left), drop=FALSE] - diff.left[, -1, drop=FALSE]
diff.both[,1] <- diff.both[,1] + distance.diff[,1]  # Very important due to distance variation to the first neighbor.
v1.k <- matrix(NA, dim(data2)[2], 447)
skew <- c()
skew1 <- c()
top.ave <- c()
remain.ave <- c()
for(j in 1:dim(diff.both)[2]){
#v <- (distance.diff[,j])
#v <- pmax(distance.diff[,j], diff.both[,j-1])
v <- diff.both[,j]
v1 <- v
for(m in 1:length(v)){
#v1[m] <- (v[m] + sum(v[knn.res$indices[m,2:(1+ceiling(log2(j+1)))]]))/(1+length(2:(1+ceiling(log2(j+1)))))
v1[m] <- (v[m] + v[knn.res$indices[m,2]])/2
}
v1.k[, j] <- (v1)
v2 <- v1[order(v1, decreasing = T)[(j+2):length(v1)]]
skew1 <- c(skew1, skewness(v2))
top.values <- v1[knn.res$indices[which.max(v1),1:(j+1)]]
#top.values <- v1[order(v1, decreasing = T)[1:(j)]]
v2 <- c(v2[v2 <= (quantile(v2, 0.75)+1.5*IQR(v2)) & v2 >= (quantile(v2, 0.25)-1.5*IQR(v2))], rep(exp(mean(log(top.values[top.values>0]))), (2)))
skew <- c(skew, skewness(v2))
v1.sort <- sort(v1, decreasing = T)
top.ave <- c(top.ave, mean(v1.sort[1:(j)]))
remain.ave <- c(remain.ave, mean(v1.sort[(j+1):length(v1)]))
}
#}
ids <- which(skew > 2)
col <- rep('cls', dim(tmp)[2])
for(id in ids){
top.cell <- which.max(v1.k[,(id)])
col[knn.res$indices[top.cell,1:(id+1)]] <- paste0(col[knn.res$indices[top.cell,1:(id+1)]], '_', id)
}
#tsne <- Rtsne::Rtsne(t(tmp), dims=2, perplexity=30)
#plot(tsne$Y[,1], tsne$Y[,2], cex=0.3, col=factor(col))
genes <- c('Aoc1', 'Arg2', 'Ccl25', 'Fabp1', 'Alpi', 'Apoa4', 'Apoa1',
'Tph1', 'Chga', 'Chgb', 'Tac1', 'Scg3', 'Sct', 'Pax6',
'Agr2', 'Muc2', 'Tff3',
'Cd3e', 'Cd3d', 'Cd3g', 'Ptprc',
'Lyz1', 'Defa17', 'Defa22', 'Defa24', 'Ang4',
'Lgr5', 'Ascl2', 'Axin2', 'Olfm4', 'Slc12a2',
'Mki67', 'Cdk4', 'Mcm6', 'Mcm5', 'Pcna',
'Clu', 'Anxa1', 'Ly6d', 'Areg', 'Lamc2',
'Dclk1', 'Trpm5',
'Alas2', 'Hbb-bs', 'Hbb-bt', 'Hba-a1', 'Hba-a2')
library(pheatmap)
annotation_col = data.frame(
"Clusters" = factor(col, levels=c('cls_130_149', 'cls_149', 'cls_28', 'cls_5'), labels=c(1,2,3,4))
)
rownames(annotation_col) = colnames(data)
cols = list(Clusters = c("CD19+ B" = "gray80", "CD14+ Monocyte"="firebrick"))
pheatmap(log2(data[(genes), c(which(col=='cls_130_149'), which(col=='cls_149'), which(col=='cls_28'), which(col=='cls_5'))]+1),
cluster_cols = F, cluster_rows = F, annotation_col = annotation_col, show_colnames = F)
cols
col
length(which(col=='cls_28'))
library(pheatmap)
annotation_col = data.frame(
"Clusters" = factor(col, levels=c('cls_130_149', 'cls_149', 'cls_28', 'cls_5'), labels=c(1,2,3,4))
)
rownames(annotation_col) = colnames(data)
cols = list(Clusters = c("cls_130_149" = "DeepSkyBlue", "cls_149"="red1", 'cls_28'='Magenta', 'cls_5'='green3'))
pheatmap(log2(data[(genes), c(which(col=='cls_130_149'), which(col=='cls_149'), which(col=='cls_28'), which(col=='cls_5'))]+1),
cluster_cols = F, cluster_rows = F, annotation_col = annotation_col, show_colnames = F, annotation_colors = cols)
col
col.rare <- col[col!= 'cls']
data1 <- data[, col!='cls']
annotation_col = data.frame(
"Clusters" = factor(col.rare, levels=c('cls_130_149', 'cls_149', 'cls_28', 'cls_5'), labels=c(1,2,3,4))
)
rownames(annotation_col) = colnames(data1)
cols = list(Clusters = c("cls_130_149" = "DeepSkyBlue", "cls_149"="red1", 'cls_28'='Magenta', 'cls_5'='green3'))
pheatmap(log2(data1[(genes), c(which(col=='cls_130_149'), which(col=='cls_149'), which(col=='cls_28'), which(col=='cls_5'))]+1),
cluster_cols = F, cluster_rows = F, annotation_col = annotation_col, show_colnames = F, annotation_colors = cols)
pheatmap(log2(data1[(genes), c(which(col.rare=='cls_130_149'), which(col.rare=='cls_149'), which(col.rare=='cls_28'), which(col.rare=='cls_5'))]+1),
cluster_cols = F, cluster_rows = F, annotation_col = annotation_col, show_colnames = F, annotation_colors = cols)
str(data1)
table(col.rare)
annotation_col
pheatmap(log2(data1[(genes), c(which(col.rare=='cls_130_149'), which(col.rare=='cls_149'), which(col.rare=='cls_28'), which(col.rare=='cls_5'))]+1),
cluster_cols = F, cluster_rows = F, annotation_col = annotation_col, show_colnames = F, annotation_colors = cols)
col.rare <- col[col!= 'cls']
data1 <- data[, col!='cls']
annotation_col = data.frame(
"Clusters" = factor(col.rare, levels=c('cls_130_149', 'cls_149', 'cls_28', 'cls_5'))
)
rownames(annotation_col) = colnames(data1)
cols = list(Clusters = c("cls_130_149" = "DeepSkyBlue", "cls_149"="red1", 'cls_28'='Magenta', 'cls_5'='green3'))
pheatmap(log2(data1[(genes), c(which(col.rare=='cls_130_149'), which(col.rare=='cls_149'), which(col.rare=='cls_28'), which(col.rare=='cls_5'))]+1),
cluster_cols = F, cluster_rows = F, annotation_col = annotation_col, show_colnames = F, annotation_colors = cols)
col.rare <- col[col!= 'cls']
data1 <- data[, col!='cls']
annotation_col = data.frame(
"Clusters" = factor(col.rare, levels=c('cls_130_149', 'cls_149', 'cls_28', 'cls_5'))
)
rownames(annotation_col) = colnames(data1)
cols = list(Clusters = c("cls_130_149" = "red1", "cls_149"="DeepSkyBlue", 'cls_28'='Magenta', 'cls_5'='green3'))
pheatmap(log2(data1[(genes), c(which(col.rare=='cls_130_149'), which(col.rare=='cls_149'), which(col.rare=='cls_28'), which(col.rare=='cls_5'))]+1),
cluster_cols = F, cluster_rows = F, annotation_col = annotation_col, show_colnames = F, annotation_colors = cols)
col.rare
table(col.rare)
pheatmap(log2(data1[(genes), c(which(col.rare=='cls_130_149'), which(col.rare=='cls_149'), which(col.rare=='cls_28'), which(col.rare=='cls_5'))]+1),
cluster_cols = F, cluster_rows = F, annotation_col = annotation_col, annotation_names_col=F, show_colnames = F, annotation_colors = cols)
pheatmap(log2(data1[(genes), c(which(col.rare=='cls_130_149'), which(col.rare=='cls_149'), which(col.rare=='cls_28'), which(col.rare=='cls_5'))]+1),
cluster_cols = F, cluster_rows = F, annotation_col = annotation_col, annotation_names_col=F, show_colnames = F, annotation_colors = cols,
gaps_col = c(131, 150, 179))
pheatmap(log2(data1[(genes), c(which(col.rare=='cls_130_149'), which(col.rare=='cls_149'), which(col.rare=='cls_28'), which(col.rare=='cls_5'))]+1),
cluster_cols = F, cluster_rows = F, annotation_col = annotation_col, annotation_names_col=F, show_colnames = F, annotation_colors = cols,
gaps_col = c(132, 151, 180))
pheatmap(log2(data1[(genes), c(which(col.rare=='cls_130_149'), which(col.rare=='cls_149'), which(col.rare=='cls_28'), which(col.rare=='cls_5'))]+1),
cluster_cols = F, cluster_rows = F, annotation_col = annotation_col, annotation_names_col=F, show_colnames = F, annotation_colors = cols,
gaps_col = c(131, 150, 179))
col.rare <- col[col!= 'cls']
col.rare <- as.character(factor(col.rare, levels=c('cls_130_149', 'cls_149', 'cls_28', 'cls_5'), labels=c('1_1', '1_2', '2', '3')))
data1 <- data[, col!='cls']
annotation_col = data.frame(
"Clusters" = factor(col.rare, levels=c('1_1', '1_2', '2', '3'))
)
rownames(annotation_col) = colnames(data1)
cols = list(Clusters = c("1_1" = "red1", "1_2"="DeepSkyBlue", '2'='Magenta', '3'='green3'))
pheatmap(log2(data1[(genes), c(which(col.rare=='1_1'), which(col.rare=='1_2'), which(col.rare=='2'), which(col.rare=='3'))]+1),
cluster_cols = F, cluster_rows = F, annotation_col = annotation_col, annotation_names_col=F, show_colnames = F, annotation_colors = cols,
gaps_col = c(131, 150, 179))
genes <- c('Aoc1', 'Arg2', 'Ccl25', 'Fabp1', 'Alpi', 'Apoa4', 'Apoa1',
'Agr2', 'Muc2', 'Tff3',
'Cd3e', 'Cd3d', 'Cd3g', 'Ptprc',
'Lyz1', 'Defa17', 'Defa22', 'Defa24', 'Ang4',
'Lgr5', 'Ascl2', 'Axin2', 'Olfm4', 'Slc12a2',
'Mki67', 'Cdk4', 'Mcm6', 'Mcm5', 'Pcna',
'Clu', 'Anxa1', 'Ly6d', 'Areg', 'Lamc2',
'Dclk1', 'Trpm5',
'Alas2', 'Hbb-bs', 'Hbb-bt', 'Hba-a1', 'Hba-a2')
library(pheatmap)
col.rare <- col[col!= 'cls']
col.rare <- as.character(factor(col.rare, levels=c('cls_130_149', 'cls_149', 'cls_28', 'cls_5'), labels=c('1_1', '1_2', '2', '3')))
data1 <- data[, col!='cls']
annotation_col = data.frame(
"Clusters" = factor(col.rare, levels=c('1_1', '1_2', '2', '3'))
)
rownames(annotation_col) = colnames(data1)
cols = list(Clusters = c("1_1" = "red1", "1_2"="DeepSkyBlue", '2'='Magenta', '3'='green3'))
pheatmap(log2(data1[(genes), c(which(col.rare=='1_1'), which(col.rare=='1_2'), which(col.rare=='2'), which(col.rare=='3'))]+1),
cluster_cols = F, cluster_rows = F, annotation_col = annotation_col, annotation_names_col=F, show_colnames = F, annotation_colors = cols,
gaps_col = c(131, 150, 179))
genes <- c('Agr2', 'Muc2', 'Tff3',
'Cd3e', 'Cd3d', 'Cd3g', 'Ptprc',
'Lyz1', 'Defa17', 'Defa22', 'Defa24', 'Ang4',
'Lgr5', 'Ascl2', 'Axin2', 'Olfm4', 'Slc12a2',
'Mki67', 'Cdk4', 'Mcm6', 'Mcm5', 'Pcna',
'Clu', 'Anxa1', 'Ly6d', 'Areg', 'Lamc2',
'Dclk1', 'Trpm5',
'Alas2', 'Hbb-bs', 'Hbb-bt', 'Hba-a1', 'Hba-a2')
library(pheatmap)
col.rare <- col[col!= 'cls']
col.rare <- as.character(factor(col.rare, levels=c('cls_130_149', 'cls_149', 'cls_28', 'cls_5'), labels=c('1_1', '1_2', '2', '3')))
data1 <- data[, col!='cls']
annotation_col = data.frame(
"Clusters" = factor(col.rare, levels=c('1_1', '1_2', '2', '3'))
)
rownames(annotation_col) = colnames(data1)
cols = list(Clusters = c("1_1" = "red1", "1_2"="DeepSkyBlue", '2'='Magenta', '3'='green3'))
pheatmap(log2(data1[(genes), c(which(col.rare=='1_1'), which(col.rare=='1_2'), which(col.rare=='2'), which(col.rare=='3'))]+1),
cluster_cols = F, cluster_rows = F, annotation_col = annotation_col, annotation_names_col=F, show_colnames = F, annotation_colors = cols,
gaps_col = c(131, 150, 179))
tsne <- Rtsne::Rtsne(t(tmp), dims=2, perplexity=30)
plot(tsne$Y[,1], tsne$Y[,2], cex=0.3, col=factor(col))
?plot
st(tsne)
str(tsne)
table(col)
#plot(tsne$Y[,1], tsne$Y[,2], cex=0.3, col=factor(col))
tsne.df <- data.frame(TSNE.1=tsne$Y[,1], TSNE.2=tsne$Y[,2], cluster=col)
p <- ggplot(data=tsne.df, aes(x=TSNE.1, y=TSNE.2, colour=cluster)) + geom_point(size=0.001) +
theme_bw() + theme(legend.position='none',  panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.text = element_text(size = 16),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_text(size=16),
axis.title.y = element_text(size=16),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank()) + labs(x=NULL, y=NULL) +
scale_color_manual(name=NULL, values = c("cls"='grey', "cls_130_149"="red1", "cls_149"="DeepSkyBlue", "cls_28" = "Magenta", 'cls_5'='green3'))
library(ggplot2)
#plot(tsne$Y[,1], tsne$Y[,2], cex=0.3, col=factor(col))
tsne.df <- data.frame(TSNE.1=tsne$Y[,1], TSNE.2=tsne$Y[,2], cluster=col)
p <- ggplot(data=tsne.df, aes(x=TSNE.1, y=TSNE.2, colour=cluster)) + geom_point(size=0.001) +
theme_bw() + theme(legend.position='none',  panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.text = element_text(size = 16),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_text(size=16),
axis.title.y = element_text(size=16),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank()) + labs(x=NULL, y=NULL) +
scale_color_manual(name=NULL, values = c("cls"='grey', "cls_130_149"="red1", "cls_149"="DeepSkyBlue", "cls_28" = "Magenta", 'cls_5'='green3'))
p
p <- ggplot(data=tsne.df, aes(x=TSNE.1, y=TSNE.2, colour=cluster)) + geom_point(size=0.001) +
theme_bw() + theme(legend.position='none',  panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.text = element_text(size = 16),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_text(size=16),
axis.title.y = element_text(size=16),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank()) + labs(x='tSNE-1', y='tSNE-2') +
scale_color_manual(name=NULL, values = c("cls"='grey', "cls_130_149"="red1", "cls_149"="DeepSkyBlue", "cls_28" = "Magenta", 'cls_5'='green3'))
p
p <- ggplot(data=tsne.df, aes(x=TSNE.1, y=TSNE.2, colour=cluster)) + geom_point(size=0.01) +
theme_bw() + theme(legend.position='none',  panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.text = element_text(size = 16),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_text(size=16),
axis.title.y = element_text(size=16),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank()) + labs(x='tSNE-1', y='tSNE-2') +
scale_color_manual(name=NULL, values = c("cls"='grey', "cls_130_149"="red1", "cls_149"="DeepSkyBlue", "cls_28" = "Magenta", 'cls_5'='green3'))
p
p <- ggplot(data=tsne.df, aes(x=TSNE.1, y=TSNE.2, colour=cluster)) + geom_point(size=0.1) +
theme_bw() + theme(legend.position='none',  panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.text = element_text(size = 16),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_text(size=16),
axis.title.y = element_text(size=16),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank()) + labs(x='tSNE-1', y='tSNE-2') +
scale_color_manual(name=NULL, values = c("cls"='grey', "cls_130_149"="red1", "cls_149"="DeepSkyBlue", "cls_28" = "Magenta", 'cls_5'='green3'))
p
p <- ggplot(data=tsne.df, aes(x=TSNE.1, y=TSNE.2, colour=cluster)) + geom_point(size=1) +
theme_bw() + theme(legend.position='none',  panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.text = element_text(size = 16),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_text(size=16),
axis.title.y = element_text(size=16),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank()) + labs(x='tSNE-1', y='tSNE-2') +
scale_color_manual(name=NULL, values = c("cls"='grey', "cls_130_149"="red1", "cls_149"="DeepSkyBlue", "cls_28" = "Magenta", 'cls_5'='green3'))
p
p <- ggplot(data=tsne.df, aes(x=TSNE.1, y=TSNE.2, colour=cluster)) + geom_point(size=0.3) +
theme_bw() + theme(legend.position='none',  panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
legend.text = element_text(size = 16),
panel.border = element_rect(colour = "black", fill=NA, size=1),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.title.x = element_text(size=16),
axis.title.y = element_text(size=16),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank()) + labs(x='tSNE-1', y='tSNE-2') +
scale_color_manual(name=NULL, values = c("cls"='grey', "cls_130_149"="red1", "cls_149"="DeepSkyBlue", "cls_28" = "Magenta", 'cls_5'='green3'))
p
save(tsne.df, file='tsne_data.RData')
str(data)
table(col)
genes <- c('Agr2', 'Muc2', 'Tff3',
'Cd3e', 'Cd3d', 'Cd3g', 'Ptprc',
'Lyz1', 'Defa17', 'Defa22', 'Defa24', 'Ang4',
'Lgr5', 'Ascl2', 'Axin2', 'Olfm4', 'Slc12a2',
'Mki67', 'Cdk4', 'Mcm6', 'Mcm5', 'Pcna',
'Clu', 'Anxa1', 'Ly6d', 'Areg', 'Lamc2',
'Dclk1', 'Trpm5',
'Alas2', 'Hbb-bs', 'Hbb-bt', 'Hba-a1', 'Hba-a2',
'Cd4', 'Cd8')
library(pheatmap)
col.rare <- col[col!= 'cls']
col.rare <- as.character(factor(col.rare, levels=c('cls_130_149', 'cls_149', 'cls_28', 'cls_5'), labels=c('1_1', '1_2', '2', '3')))
data1 <- data[, col!='cls']
annotation_col = data.frame(
"Clusters" = factor(col.rare, levels=c('1_1', '1_2', '2', '3'))
)
rownames(annotation_col) = colnames(data1)
cols = list(Clusters = c("1_1" = "red1", "1_2"="DeepSkyBlue", '2'='Magenta', '3'='green3'))
pheatmap(log2(data1[(genes), c(which(col.rare=='1_1'), which(col.rare=='1_2'), which(col.rare=='2'), which(col.rare=='3'))]+1),
cluster_cols = F, cluster_rows = F, annotation_col = annotation_col, annotation_names_col=F, show_colnames = F, annotation_colors = cols,
gaps_col = c(131, 150, 179))
setdiff(genes, dimnames(data)[[1]])
genes <- c('Agr2', 'Muc2', 'Tff3',
'Cd3e', 'Cd3d', 'Cd3g', 'Ptprc',
'Lyz1', 'Defa17', 'Defa22', 'Defa24', 'Ang4',
'Lgr5', 'Ascl2', 'Axin2', 'Olfm4', 'Slc12a2',
'Mki67', 'Cdk4', 'Mcm6', 'Mcm5', 'Pcna',
'Clu', 'Anxa1', 'Ly6d', 'Areg', 'Lamc2',
'Dclk1', 'Trpm5',
'Alas2', 'Hbb-bs', 'Hbb-bt', 'Hba-a1', 'Hba-a2',
'Cd4')
library(pheatmap)
col.rare <- col[col!= 'cls']
col.rare <- as.character(factor(col.rare, levels=c('cls_130_149', 'cls_149', 'cls_28', 'cls_5'), labels=c('1_1', '1_2', '2', '3')))
data1 <- data[, col!='cls']
annotation_col = data.frame(
"Clusters" = factor(col.rare, levels=c('1_1', '1_2', '2', '3'))
)
rownames(annotation_col) = colnames(data1)
cols = list(Clusters = c("1_1" = "red1", "1_2"="DeepSkyBlue", '2'='Magenta', '3'='green3'))
pheatmap(log2(data1[(genes), c(which(col.rare=='1_1'), which(col.rare=='1_2'), which(col.rare=='2'), which(col.rare=='3'))]+1),
cluster_cols = F, cluster_rows = F, annotation_col = annotation_col, annotation_names_col=F, show_colnames = F, annotation_colors = cols,
gaps_col = c(131, 150, 179))
Heatmap(tmp[,col!='cls'])
library(ComplexHeatmap)
Heatmap(tmp[,col!='cls'])
str(tmp)
Heatmap(tmp[,col!='cls'])
pheatmap(tmp[,col!='cls'])
