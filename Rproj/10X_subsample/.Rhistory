library(FiRE)
library(Rcpp)
library(rflann)
library(Seurat)
library(ineq)
library(e1071)
library(irlba)
homedir = '/home/sam/Documents/FBT/Single/package/GapClust_manuscript'
workdir              = paste0(homedir, '/Rproj/10X_subsample/')
# where you put the data and results
setwd(workdir)
source('../../Main/utils.R')
#sourceCpp('/home/sam/Documents/FBT/Single/package/Rare/src/utils.cpp')
###############################################################
OUR.result <- list()
for (i in 2:100){
#k=ks[j]
exprimentID<-paste("10X_rare_",i,"_CD14_cells",sep="")
load(paste0('results/', exprimentID, '_ExprM.filter.RData'))
data <- ExprM.normCounts.filter[rowMeans(ExprM.normCounts.filter) > 0,]
#data <- log2(data + 1)
#disp <- FastLogVMR(as(data, 'dgCMatrix'), F)
library(RaceID)
#data2 <- log2(data +1)
data2 <- data
res <- GapClust::GapClust(data2)
predictions <- rep(0, dim(data2)[2])
predictions[res$rare_cell_indices[[which.max(res$skewness[as.integer(names(res$rare_cell_indices))+1])]]] <- 1
OUR.result[[i-1]] <- predictions
plot(1:dim(diff.both)[2], skew, cex=0.3, col=ifelse(1:197 %in% (i-1), 'red', 'black'))
}
save(CELLSIUS.result, file='results/OURClustering.RData')
source('../../Rscript/utils.R')
library(FiRE)
library(Rcpp)
library(rflann)
library(Seurat)
library(ineq)
library(e1071)
library(irlba)
homedir = '/home/sam/Documents/FBT/Single/package/GapClust_manuscript'
workdir              = paste0(homedir, '/Rproj/10X_subsample/')
# where you put the data and results
setwd(workdir)
source('../../Rscript/utils.R')
#sourceCpp('/home/sam/Documents/FBT/Single/package/Rare/src/utils.cpp')
###############################################################
OUR.result <- list()
for (i in 2:100){
#k=ks[j]
exprimentID<-paste("10X_rare_",i,"_CD14_cells",sep="")
load(paste0('results/', exprimentID, '_ExprM.filter.RData'))
data <- ExprM.normCounts.filter[rowMeans(ExprM.normCounts.filter) > 0,]
#data <- log2(data + 1)
#disp <- FastLogVMR(as(data, 'dgCMatrix'), F)
library(RaceID)
#data2 <- log2(data +1)
data2 <- data
res <- GapClust::GapClust(data2)
predictions <- rep(0, dim(data2)[2])
predictions[res$rare_cell_indices[[which.max(res$skewness[as.integer(names(res$rare_cell_indices))+1])]]] <- 1
OUR.result[[i-1]] <- predictions
plot(1:dim(diff.both)[2], skew, cex=0.3, col=ifelse(1:197 %in% (i-1), 'red', 'black'))
}
save(CELLSIUS.result, file='results/OURClustering.RData')
library(FiRE)
library(Rcpp)
library(rflann)
library(Seurat)
library(ineq)
library(e1071)
library(irlba)
homedir = '/home/sam/Documents/FBT/Single/package/GapClust_manuscript'
workdir              = paste0(homedir, '/Rproj/10X_subsample/')
# where you put the data and results
setwd(workdir)
source('../../Rscript/utils.R')
#sourceCpp('/home/sam/Documents/FBT/Single/package/Rare/src/utils.cpp')
###############################################################
OUR.result <- list()
for (i in 2:100){
#k=ks[j]
exprimentID<-paste("10X_rare_",i,"_CD14_cells",sep="")
load(paste0('results/', exprimentID, '_ExprM.filter.RData'))
data <- ExprM.normCounts.filter[rowMeans(ExprM.normCounts.filter) > 0,]
#data <- log2(data + 1)
#disp <- FastLogVMR(as(data, 'dgCMatrix'), F)
library(RaceID)
#data2 <- log2(data +1)
data2 <- data
res <- GapClust::GapClust(data2)
predictions <- rep(0, dim(data2)[2])
predictions[res$rare_cell_indices[[which.max(res$skewness[as.integer(names(res$rare_cell_indices))+1])]]] <- 1
OUR.result[[i-1]] <- predictions
plot(1:length(res$skewness), res$skewness, cex=0.3, col=ifelse(1:197 %in% (i-1), 'red', 'black'))
}
save(OUR.result, file='results/OURClustering.RData')
str(res)
data <- data2
## Fano genes for clustering
pbmc <- CreateSeuratObject(counts = data)
pbmc <- FindVariableFeatures(object = pbmc, selection.method='vst', nfeatures=dim(data)[1], verbose = F)
vst <- (pbmc@assays$RNA@meta.features$vst.variance.standardized)
den <- density(vst)
features.vst <- dimnames(data)[[1]][vst > find_elbow(den$x[which.max(den$y):length(den$x)], den$y[which.max(den$y):length(den$y)])]
tmp <- data[dimnames(data)[[1]] %in% (features.vst),]
tmp <- log2(as.matrix(tmp)+1)
pca <- irlba(t(tmp), nv=50) # More robust no error, contrast to calcul.pca
pca$pca <-t(pca$d*t(pca$u))
knn.res <- Neighbour(pca$pca, pca$pca, k=k)
distance.diff <- (knn.res$distances[, -1, drop = FALSE] - knn.res$distances[, -ncol(knn.res$distances), drop = FALSE])
diff.left <- distance.diff[, -1, drop = FALSE] - distance.diff[, -ncol(distance.diff), drop = FALSE]
diff.both <- diff.left[, -ncol(diff.left), drop=FALSE] - diff.left[, -1, drop=FALSE]
diff.both[,1] <- diff.both[,1] + distance.diff[,1]  # Very important due to distance variation to the first neighbor.
v1.k <- matrix(NA, dim(data)[2], k-3)
skew <- c()
for(j in 1:dim(diff.both)[2]){
v <- diff.both[,j]
v1 <- v
for(m in 1:length(v)){
v1[m] <- (v[m] + v[knn.res$indices[m,2]])/2
}
v1.k[, j] <- (v1)
v2 <- v1[order(v1, decreasing = T)[(j+2):length(v1)]]
top.values <- v1[knn.res$indices[which.max(v1),1:(j+1)]]
v2 <- c(v2[v2 <= (quantile(v2, 0.75)+1.5*IQR(v2)) & v2 >= (quantile(v2, 0.25)-1.5*IQR(v2))], rep(sum(top.values[top.values>0])/length(top.values), (2)))
skew <- c(skew, skewness(v2))
}
ids <- which(skew > 2)
col.mat <- matrix(0, length(ids), dim(tmp)[2])
for(i in 1:length(ids)){
top.cell <- which.max(v1.k[,(ids[i])])
col.mat[i, knn.res$indices[top.cell,1:(ids[i]+1)]] <- skew[ids[i]]
}
id.max <- apply(col.mat, 2, which.max)
max.val <- apply(col.mat, 2, max)
id.max[max.val==0] <- 0
cnt <- table(id.max)
cnt <- cnt[names(cnt)!='0']
id.max.match <- as.integer(names(cnt)[which(cnt == as.integer(names(cnt)) + 1)])
cls <- rep(0, dim(tmp)[2])
for(id.match in id.max.match){
cls[id.max==(id.match)] <- which(id.max.match %in% id.match)
}
rare.cells <- list()
for(id.match in id.max.match){
rare.cells[[as.character(ids[id.match])]] <- knn.res$indices[which.max(v1.k[,ids[id.match]]), 1:(ids[id.match]+1)]
}
k=200
## Fano genes for clustering
pbmc <- CreateSeuratObject(counts = data)
pbmc <- FindVariableFeatures(object = pbmc, selection.method='vst', nfeatures=dim(data)[1], verbose = F)
vst <- (pbmc@assays$RNA@meta.features$vst.variance.standardized)
den <- density(vst)
features.vst <- dimnames(data)[[1]][vst > find_elbow(den$x[which.max(den$y):length(den$x)], den$y[which.max(den$y):length(den$y)])]
tmp <- data[dimnames(data)[[1]] %in% (features.vst),]
tmp <- log2(as.matrix(tmp)+1)
pca <- irlba(t(tmp), nv=50) # More robust no error, contrast to calcul.pca
pca$pca <-t(pca$d*t(pca$u))
knn.res <- Neighbour(pca$pca, pca$pca, k=k)
distance.diff <- (knn.res$distances[, -1, drop = FALSE] - knn.res$distances[, -ncol(knn.res$distances), drop = FALSE])
diff.left <- distance.diff[, -1, drop = FALSE] - distance.diff[, -ncol(distance.diff), drop = FALSE]
diff.both <- diff.left[, -ncol(diff.left), drop=FALSE] - diff.left[, -1, drop=FALSE]
diff.both[,1] <- diff.both[,1] + distance.diff[,1]  # Very important due to distance variation to the first neighbor.
v1.k <- matrix(NA, dim(data)[2], k-3)
skew <- c()
for(j in 1:dim(diff.both)[2]){
v <- diff.both[,j]
v1 <- v
for(m in 1:length(v)){
v1[m] <- (v[m] + v[knn.res$indices[m,2]])/2
}
v1.k[, j] <- (v1)
v2 <- v1[order(v1, decreasing = T)[(j+2):length(v1)]]
top.values <- v1[knn.res$indices[which.max(v1),1:(j+1)]]
v2 <- c(v2[v2 <= (quantile(v2, 0.75)+1.5*IQR(v2)) & v2 >= (quantile(v2, 0.25)-1.5*IQR(v2))], rep(sum(top.values[top.values>0])/length(top.values), (2)))
skew <- c(skew, skewness(v2))
}
ids <- which(skew > 2)
col.mat <- matrix(0, length(ids), dim(tmp)[2])
for(i in 1:length(ids)){
top.cell <- which.max(v1.k[,(ids[i])])
col.mat[i, knn.res$indices[top.cell,1:(ids[i]+1)]] <- skew[ids[i]]
}
id.max <- apply(col.mat, 2, which.max)
max.val <- apply(col.mat, 2, max)
id.max[max.val==0] <- 0
cnt <- table(id.max)
cnt <- cnt[names(cnt)!='0']
id.max.match <- as.integer(names(cnt)[which(cnt == as.integer(names(cnt)) + 1)])
cls <- rep(0, dim(tmp)[2])
for(id.match in id.max.match){
cls[id.max==(id.match)] <- which(id.max.match %in% id.match)
}
rare.cells <- list()
for(id.match in id.max.match){
rare.cells[[as.character(ids[id.match])]] <- knn.res$indices[which.max(v1.k[,ids[id.match]]), 1:(ids[id.match]+1)]
}
table(cls)
cnt
i
i=2
exprimentID<-paste("10X_rare_",i,"_CD14_cells",sep="")
load(paste0('results/', exprimentID, '_ExprM.filter.RData'))
data <- ExprM.normCounts.filter[rowMeans(ExprM.normCounts.filter) > 0,]
#data <- log2(data + 1)
#disp <- FastLogVMR(as(data, 'dgCMatrix'), F)
library(RaceID)
#data2 <- log2(data +1)
data2 <- data
data <- data2
## Fano genes for clustering
pbmc <- CreateSeuratObject(counts = data)
pbmc <- FindVariableFeatures(object = pbmc, selection.method='vst', nfeatures=dim(data)[1], verbose = F)
vst <- (pbmc@assays$RNA@meta.features$vst.variance.standardized)
den <- density(vst)
features.vst <- dimnames(data)[[1]][vst > find_elbow(den$x[which.max(den$y):length(den$x)], den$y[which.max(den$y):length(den$y)])]
tmp <- data[dimnames(data)[[1]] %in% (features.vst),]
tmp <- log2(as.matrix(tmp)+1)
pca <- irlba(t(tmp), nv=50) # More robust no error, contrast to calcul.pca
pca$pca <-t(pca$d*t(pca$u))
knn.res <- Neighbour(pca$pca, pca$pca, k=k)
distance.diff <- (knn.res$distances[, -1, drop = FALSE] - knn.res$distances[, -ncol(knn.res$distances), drop = FALSE])
diff.left <- distance.diff[, -1, drop = FALSE] - distance.diff[, -ncol(distance.diff), drop = FALSE]
diff.both <- diff.left[, -ncol(diff.left), drop=FALSE] - diff.left[, -1, drop=FALSE]
diff.both[,1] <- diff.both[,1] + distance.diff[,1]  # Very important due to distance variation to the first neighbor.
v1.k <- matrix(NA, dim(data)[2], k-3)
skew <- c()
for(j in 1:dim(diff.both)[2]){
v <- diff.both[,j]
v1 <- v
for(m in 1:length(v)){
v1[m] <- (v[m] + v[knn.res$indices[m,2]])/2
}
v1.k[, j] <- (v1)
v2 <- v1[order(v1, decreasing = T)[(j+2):length(v1)]]
top.values <- v1[knn.res$indices[which.max(v1),1:(j+1)]]
v2 <- c(v2[v2 <= (quantile(v2, 0.75)+1.5*IQR(v2)) & v2 >= (quantile(v2, 0.25)-1.5*IQR(v2))], rep(sum(top.values[top.values>0])/length(top.values), (2)))
skew <- c(skew, skewness(v2))
}
ids <- which(skew > 2)
col.mat <- matrix(0, length(ids), dim(tmp)[2])
for(i in 1:length(ids)){
top.cell <- which.max(v1.k[,(ids[i])])
col.mat[i, knn.res$indices[top.cell,1:(ids[i]+1)]] <- skew[ids[i]]
}
id.max <- apply(col.mat, 2, which.max)
max.val <- apply(col.mat, 2, max)
id.max[max.val==0] <- 0
cnt <- table(id.max)
cnt <- cnt[names(cnt)!='0']
id.max.match <- as.integer(names(cnt)[which(cnt == as.integer(names(cnt)) + 1)])
cls <- rep(0, dim(tmp)[2])
for(id.match in id.max.match){
cls[id.max==(id.match)] <- which(id.max.match %in% id.match)
}
rare.cells <- list()
for(id.match in id.max.match){
rare.cells[[as.character(ids[id.match])]] <- knn.res$indices[which.max(v1.k[,ids[id.match]]), 1:(ids[id.match]+1)]
}
cnt
library(FiRE)
library(Rcpp)
library(rflann)
library(Seurat)
library(ineq)
library(e1071)
library(irlba)
homedir = '/home/sam/Documents/FBT/Single/package/GapClust_manuscript'
workdir              = paste0(homedir, '/Rproj/10X_subsample/')
# where you put the data and results
setwd(workdir)
source('../../Rscript/utils.R')
#sourceCpp('/home/sam/Documents/FBT/Single/package/Rare/src/utils.cpp')
###############################################################
OUR.result <- list()
for (i in 2:100){
#k=ks[j]
exprimentID<-paste("10X_rare_",i,"_CD14_cells",sep="")
load(paste0('results/', exprimentID, '_ExprM.filter.RData'))
data <- ExprM.normCounts.filter[rowMeans(ExprM.normCounts.filter) > 0,]
#data <- log2(data + 1)
#disp <- FastLogVMR(as(data, 'dgCMatrix'), F)
library(RaceID)
#data2 <- log2(data +1)
data2 <- data
res <- GapClust::GapClust(data2)
predictions <- rep(0, dim(data2)[2])
predictions[res$rare_cell_indices[[which.max(res$skewness[as.integer(names(res$rare_cell_indices))+1])]]] <- 1
OUR.result[[i-1]] <- predictions
plot(1:length(res$skewness), res$skewness, cex=0.3, col=ifelse(1:197 %in% (i-1), 'red', 'black'))
}
save(OUR.result, file='results/OURClustering.RData')
i
str(res)
data <- data2
## Fano genes for clustering
pbmc <- CreateSeuratObject(counts = data)
pbmc <- FindVariableFeatures(object = pbmc, selection.method='vst', nfeatures=dim(data)[1], verbose = F)
vst <- (pbmc@assays$RNA@meta.features$vst.variance.standardized)
den <- density(vst)
features.vst <- dimnames(data)[[1]][vst > find_elbow(den$x[which.max(den$y):length(den$x)], den$y[which.max(den$y):length(den$y)])]
tmp <- data[dimnames(data)[[1]] %in% (features.vst),]
tmp <- log2(as.matrix(tmp)+1)
pca <- irlba(t(tmp), nv=50) # More robust no error, contrast to calcul.pca
pca$pca <-t(pca$d*t(pca$u))
knn.res <- Neighbour(pca$pca, pca$pca, k=k)
distance.diff <- (knn.res$distances[, -1, drop = FALSE] - knn.res$distances[, -ncol(knn.res$distances), drop = FALSE])
diff.left <- distance.diff[, -1, drop = FALSE] - distance.diff[, -ncol(distance.diff), drop = FALSE]
diff.both <- diff.left[, -ncol(diff.left), drop=FALSE] - diff.left[, -1, drop=FALSE]
diff.both[,1] <- diff.both[,1] + distance.diff[,1]  # Very important due to distance variation to the first neighbor.
v1.k <- matrix(NA, dim(data)[2], k-3)
skew <- c()
for(j in 1:dim(diff.both)[2]){
v <- diff.both[,j]
v1 <- v
for(m in 1:length(v)){
v1[m] <- (v[m] + v[knn.res$indices[m,2]])/2
}
v1.k[, j] <- (v1)
v2 <- v1[order(v1, decreasing = T)[(j+2):length(v1)]]
top.values <- v1[knn.res$indices[which.max(v1),1:(j+1)]]
v2 <- c(v2[v2 <= (quantile(v2, 0.75)+1.5*IQR(v2)) & v2 >= (quantile(v2, 0.25)-1.5*IQR(v2))], rep(sum(top.values[top.values>0])/length(top.values), (2)))
skew <- c(skew, skewness(v2))
}
ids <- which(skew > 2)
col.mat <- matrix(0, length(ids), dim(tmp)[2])
for(i in 1:length(ids)){
top.cell <- which.max(v1.k[,(ids[i])])
col.mat[i, knn.res$indices[top.cell,1:(ids[i]+1)]] <- skew[ids[i]]
}
id.max <- apply(col.mat, 2, which.max)
max.val <- apply(col.mat, 2, max)
id.max[max.val==0] <- 0
cnt <- table(id.max)
cnt <- cnt[names(cnt)!='0']
id.max.match <- as.integer(names(cnt)[which(cnt == as.integer(names(cnt)) + 1)])
cls <- rep(0, dim(tmp)[2])
for(id.match in id.max.match){
cls[id.max==(id.match)] <- which(id.max.match %in% id.match)
}
cnt
str(id.max)
str(skewness)
str(skew)
ids
table(id.max)
ids
skew[2]
str(col.mat)
id.max.match <- ids[as.integer(names(cnt)[which(cnt == as.integer(names(cnt)) + 1)])]
id.max.match
as.integer(names(cnt)[which(cnt == as.integer(names(cnt)) + 1)])
cnt
as.integer(names(cnt)[which(cnt == ids[as.integer(names(cnt))] + 1)])
ids[as.integer(names(cnt)[which(cnt == ids[as.integer(names(cnt))] + 1)])]
cnt[which(cnt == ids[as.integer(names(cnt))] + 1)]
id.max.match <- cnt[which(cnt == ids[as.integer(names(cnt))] + 1)]
id.max.match
