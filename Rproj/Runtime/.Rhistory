homedir = '/home/sam/Documents/FBT/Single/package/GapClust_manuscript'
workdir              = paste0(homedir, '/Rproj/Runtime/')
# where you put the data and results
setwd(workdir)
source('../../Rscript/utils.R')
source('../../Rfunction/CellSIUS.R')
source('../../Rfunction/CellSIUS_final_cluster_assignment.R')
source('../../Rfunction/CellSIUS_GetResults.R')
load('../10X_full/data/PBMC_68K_normalized.RData')
df <- read.table('../10X_full/data/68k_pbmc_barcodes_annotation.tsv', header=T, sep='\t', stringsAsFactors = F)
cell.num <- c(1000, 2500, 5000, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000, 55000, 60000, 65000, 68579)
rm(list=ls())
gc()
homedir = '/home/sam/Documents/FBT/Single/package/GapClust_manuscript'
workdir              = paste0(homedir, '/Rproj/Runtime/')
# where you put the data and results
setwd(workdir)
require('Matrix')
require('plyr')
ranger_preprocess<-function(data_mat, ngenes_keep=1000, dataSave='./', optionToSave=F, minLibSize=0, verbose=T){
ngenes_keep = 1000
#write.csv(x = data_mat$gene_symbols, file = "gene_symbols.csv",quote = F,row.names =F)
#l<-.normalize_by_umi(data_mat)
l<-.normalize_by_umi_2(data_mat, dataSave, minLibSize, verbose)
m_n<-l$m
if (verbose){
cat("Select variable Genes...\n")
}
df<- .get_variable_gene(m_n)
gc()
if (verbose){
cat("Sort Top Genes...\n")
}
disp_cut_off<-sort(df$dispersion_norm,decreasing=T)[ngenes_keep]
if (verbose){
cat("Cutoff Genes...\n")
}
df$used<-df$dispersion_norm >= disp_cut_off
features = head(order(-df$dispersion_norm),ngenes_keep)
#system("rm genes",ignore.stderr = T)
if (optionToSave){
write.csv(features, file = paste(dataSave,"genes",sep=""), quote = F,row.names = F)
write.csv(l$use_genes[features], file = paste(dataSave,"genes_used_all",sep=""), quote = F,row.names = F)
}
#genes = read.csv(file = "genes")
#features = genes$x
#Final Data
m_n_68K<-m_n[,features]
m_filt<-Matrix(log2(m_n_68K+1),sparse = T)
if (verbose){
cat(paste("Writing Log Normalized whole_matrix, DIM:",dim(m_filt)[1], dim(m_filt)[2]))
}
#system("rm whole_matrix",ignore.stderr = T)
if (optionToSave){
writeMM(m_filt,file="whole_matrix")
}
list(preprocessedData=m_filt, selGenes=features)
}
# ---------------------------------------------
# normalize the gene barcode matrix by umi
# filter based on read count first
# ---------------------------------------------
.normalize_by_umi_2 <-function(x, dataSave, minLibSize, verbose){
mat  = x$mat
gene_symbols = x$gene_symbols
#Filter Cells
if (minLibSize > 0){
keepCellIndex <- c()
for (i in c(1:dim(mat)[1])){
count = sum(mat[i,] > 0)
if (count > minLibSize){
keepCellIndex <- c(keepCellIndex, i)
}
}
mat <- mat[keepCellIndex,]
if (verbose){
cat(paste("Dimensions of matrix after cell filtering : ",dim(mat),"\n"))
}
write.csv(keepCellIndex, file = paste(dataSave,"keepCellIndexes.csv",sep=""), quote = F,row.names = F)
}
#Filter Genes
cs <- colSums(mat>2)
x_use_genes <- which(cs > 3)
x_filt<-mat[,x_use_genes]
gene_symbols = gene_symbols[x_use_genes]
if (verbose){
cat("Dimensions os filtered Matrix:")
cat(paste(dim(x_filt),"\n"))
}
rs<-rowSums(x_filt)
rs_med<-median(rs)
x_norm<-x_filt/(rs/rs_med)
list(m=x_norm,use_genes=gene_symbols)
}
# --------------------------------------------------
# get variable genes from normalized UMI counts
# --------------------------------------------------
# m: matrix normalized by UMI counts
.get_variable_gene<-function(m){
df<-data.frame(mean=colMeans(m),cv=apply(m,2,sd)/colMeans(m),var=apply(m,2,var))
df$dispersion<-with(df,var/mean)
df$mean_bin<-with(df,cut(mean,breaks=c(-Inf,quantile(mean,seq(0.1,1,0.05)),Inf)))
var_by_bin<-ddply(df,"mean_bin",function(x) {
data.frame(bin_median=median(x$dispersion),
bin_mad=mad(x$dispersion))
})
df$bin_disp_median<-var_by_bin$bin_median[match(df$mean_bin,var_by_bin$mean_bin)]
df$bin_disp_mad<-var_by_bin$bin_mad[match(df$mean_bin,var_by_bin$mean_bin)]
df$dispersion_norm<-with(df,abs(dispersion-bin_disp_median)/bin_disp_mad)
df
}
load('../10X_full/data/PBMC_68K_normalized.RData')
cell.num <- c(1000, 2500, 5000, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000, 55000, 60000, 65000, 68579)
rm(list=ls())
gc()
#fixed parameters for GiniClust2
minCellNum           = 3                                                # filtering, remove genes expressed in fewer than minCellNum cells
minGeneNum           = 2000                                             # filtering, remove cells expressed in fewer than minGeneNum genes
expressed_cutoff     = 1                                                # filtering, for raw counts
gini.bi              = 0                                                # fitting, default is 0, for qPCR data, set as 1.
log2.expr.cutoffl    = 0                                                # cutoff for range of gene expression
log2.expr.cutoffh    = 20                                               # cutoff for range of gene expression
Gini.pvalue_cutoff   = 0.0001                                           # fitting, Pvalue, control how many Gini genes chosen
Norm.Gini.cutoff     = 1                                                # fitting, NormGini, control how many Gini genes chosen, 1 means not used.
span                 = 0.9                                              # parameter for LOESS fitting
outlier_remove       = 0.75                                             # parameter for LOESS fitting
GeneList             = 1                                                # parameter for clustering, 1 means using pvalue, 0 means using HighNormGini
Gamma                = 0.9                                              # parameter for clustering
diff.cutoff          = 1                                                # MAST analysis, filter genes that don't have high a log2_foldchange to reduce gene num
lr.p_value_cutoff    = 1e-5                                             # MAST analysis, pvalue cutoff to identify differentially expressed genes
CountsForNormalized  = 100000                                           # if normalizing- by default not used
# where GiniClust2 R functions are stored
#dataset specific parameters:
MinPts               = 3                                                # parameter for DBSCAN
eps                  = 0.45                                             # parameter for DBSCAN
mycols               = c("grey50","greenyellow","red","blue","black","green","orange","purple","yellow","navy","magenta")
# color setting for tSNE plot
perplexity_G         = 30                                               # parameter for Gini tSNE
perplexity_F         = 30                                               # parameter for Fano tSNE
max_iter_G           = 1000                                             # parameter for Gini tSNE
max_iter_F           = 1000                                             # parameter for Fano tSNE
ks                   = c(2,2,2,3,3,3,3)                                 # a range of k's for k-means for subsampled data depending on rarity: use k=2 for rarer, k=3 for more common
gap_statistic        = FALSE                                            # whether the gap statistic should be used to determine k
K.max                = 10                                               # if using the gap statistic, highest k that should be considered
automatic_eps        = TRUE                                             # whether to determine eps using KNN- for consistency we use the same eps as full data set here
automatic_minpts     = TRUE                                             # whether to determine MinPts based on the size of the data set
homedir = '/home/sam/Documents/FBT/Single/package/GapClust_manuscript'
workdir              = paste0(homedir, '/Rproj/Runtime/')
# where you put the data and results
setwd(workdir)
Rfundir              = "../../Rfunction/"
#dir.create(file.path(workdir, "results"), showWarnings = FALSE) #folder to save results
#dir.create(file.path(workdir, "figures"), showWarnings = FALSE) #folder to save figures
#load packages and functions
source(paste(Rfundir,"GiniClust2_packages.R",sep=""))
source(paste(Rfundir,"GiniClust2_functions.R",sep=""))
#generate 140 data sets, with different proportions
#source(paste(Rfundir,"Generate_10X_datasets.R",sep=""))
#for each of 99 data sets, run GiniClust2
#for each, plot a barplot comparing the reference and the GiniClust2 result
load('../10X_full/data/PBMC_68K_normalized.RData')
cell.num <- c(1000, 2500, 5000, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000, 55000, 60000, 65000, 68579)
library(rflann)
library(Seurat)
library(ineq)
library(e1071)
library(irlba)
homedir = '/home/sam/Documents/FBT/Single/package/GapClust_manuscript'
workdir              = paste0(homedir, '/Rproj/Runtime/')
# where you put the data and results
setwd(workdir)
source('../../Rscript/utils.R')
require('Matrix')
require('plyr')
find_elbow <- function(x, y){
n <- length(x)
firstPoint <- c(x[1], y[1])
lineVec = c(x[n]-x[1], y[n]-y[1])
lineVecNorm = lineVec/(sqrt(sum(lineVec^2)))
vecFromFirst = cbind(x-x[1], y-y[1])
scalaProd =rowSums(vecFromFirst * cbind(rep(lineVecNorm[1], n), rep(lineVecNorm[2], n)))
vecFromFirstParallel = outer(scalaProd, lineVecNorm)
vecToLine = vecFromFirst - vecFromFirstParallel
distToLine = sqrt(rowSums(vecToLine^2))
idx = which.max(distToLine)
return(x[idx])
}
load('../10X_full/data/PBMC_68K_normalized.RData')
cell.num <- c(1000, 2500, 5000, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000, 55000, 60000, 65000, 68579)
rm(list=ls())
gc()
library(RaceID)
homedir = '/home/sam/Documents/FBT/Single/package/GapClust_manuscript'
workdir              = paste0(homedir, '/Rproj/Runtime/')
# where you put the data and results
setwd(workdir)
load('../10X_full/data/PBMC_68K_normalized.RData')
df <- read.table('../10X_full/data/68k_pbmc_barcodes_annotation.tsv', header=T, sep='\t', stringsAsFactors = F)
cell.num <- c(1000, 2500, 5000, 10000, 15000, 20000, 25000, 30000, 35000, 40000, 45000, 50000, 55000, 60000, 65000, 68579)
rm(list=ls())
gc()
